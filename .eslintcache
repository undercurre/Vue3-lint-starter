[{"G:\\workspace\\metu-lint\\src\\vite-env.d.ts":"1"},{"size":281,"mtime":1676209520595,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6rniql","G:\\workspace\\metu-lint\\src\\vite-env.d.ts",[],["7","8","9"],{"ruleId":"10","severity":2,"message":"11","line":6,"column":36,"nodeType":"12","messageId":"13","endLine":6,"endColumn":38,"suppressions":"14"},{"ruleId":"10","severity":2,"message":"11","line":6,"column":40,"nodeType":"12","messageId":"13","endLine":6,"endColumn":42,"suppressions":"15"},{"ruleId":"16","severity":1,"message":"17","line":6,"column":44,"nodeType":"18","messageId":"19","endLine":6,"endColumn":47,"suggestions":"20","suppressions":"21"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["22"],["23"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["24","25"],["26"],{"kind":"27","justification":"28"},{"kind":"27","justification":"28"},{"messageId":"29","fix":"30","desc":"31"},{"messageId":"32","fix":"33","desc":"34"},{"kind":"27","justification":"28"},"directive","","suggestUnknown",{"range":"35","text":"36"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"35","text":"37"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[247,250],"unknown","never"]